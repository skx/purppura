// Code generated by go-bindata.
// sources:
// data/index.html
// data/login.html
// data/purple.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x7d\x6f\xdb\x38\xd2\xff\xbf\x9f\x62\x96\x29\x1e\xdb\x68\x25\x39\x49\xb7\x6d\x52\xc9\x40\x90\x2c\xd2\x3c\x97\xb6\x69\x9b\xdd\xbd\xdd\xc5\xe2\x40\x89\x63\x89\x0e\x4d\xaa\x24\x25\xdb\x77\xe8\x77\x3f\x50\x6f\x96\x9c\x34\x97\xf6\x8a\xc3\xc2\x40\xf8\x36\x9c\xf9\xcd\x6f\x86\x1c\x2a\xe1\x0f\x67\xef\x4e\xaf\x7f\xbb\xfa\x09\x32\xbb\x14\xb3\x47\xa1\x6b\x40\x50\x99\x46\x04\x25\x99\x3d\x02\x08\x33\xa4\xcc\x75\x00\x42\xcb\xad\xc0\xd9\x89\x40\x6d\x0d\xfc\x31\x0d\xa6\xc1\xf4\xcf\x30\xa8\x67\x6b\x89\x25\x5a\x0a\x49\x46\xb5\x41\x1b\x91\xc2\xce\xbd\x97\xa4\xbf\x24\xe9\x12\x23\x52\x72\x5c\xe5\x4a\x5b\x02\x89\x92\x16\xa5\x8d\xc8\x8a\x33\x9b\x45\x0c\x4b\x9e\xa0\x57\x0d\x9e\x02\x97\xdc\x72\x2a\x3c\x93\x50\x81\xd1\x7e\xab\x48\x70\x79\x03\x99\xc6\x79\x44\x32\x6b\x73\x73\x1c\x04\x4b\xba\x4e\x98\xf4\x63\xa5\xac\xb1\x9a\xe6\x6e\x90\xa8\x65\xd0\x4d\x04\x87\xfe\xa1\xff\x3c\x48\x8c\xd9\xce\xf9\x4b\x2e\xfd\xc4\x18\x02\x1a\x45\x44\x8c\xdd\x08\x34\x19\xa2\x6d\x0d\x99\x44\xf3\xdc\x82\xd1\xc9\xd6\x52\xa2\x18\xfa\x8b\x4f\x05\xea\x4d\x65\xa1\xee\x7a\xfb\xfe\xfe\x81\xff\xac\xd2\xb8\x30\x04\xb8\xb4\x98\x6a\x6e\x37\x11\x31\x19\x3d\x7c\xf9\xcc\x93\xe5\x09\x9d\x3e\x79\xfe\x3e\x3d\x4a\xc4\xea\xb7\xd3\xf3\xf3\xab\xfc\xec\xfd\xe5\x2f\xf9\xe5\x5b\x39\x9d\x7f\xa0\x1f\xde\x2d\x5e\x7f\x32\xfb\x87\xf6\xd9\x79\xba\x38\xfc\xe9\x9f\x3f\x4e\xff\x2e\xcf\xdf\x7f\x4a\x02\xfd\xf2\x4d\x26\x3f\x9c\xfd\x4e\x20\xd1\xca\x18\xa5\x79\xca\x65\x44\xa8\x54\x72\xb3\x54\x85\x21\xb3\x30\xa8\x71\xde\x03\xfa\x61\xf4\xbc\x08\x16\xbb\xec\xdc\xed\xcb\x75\xf2\xe3\xc5\x7b\x1e\x4f\x0f\x5e\x7c\x2a\x37\x8b\x8f\x6f\xe6\xaf\x17\xef\xde\xd0\xcb\x9b\x79\xf1\xeb\x2f\xeb\xdf\xd7\x3f\x5f\xc9\xd3\xff\x3f\x79\x21\x0e\x96\xa7\xbf\xbe\xbd\xc8\xcf\x8f\x96\xe7\xa7\x67\x2f\x57\xe7\x6f\x2f\x92\xab\xb3\x17\xd7\x6b\xfa\xb5\xbe\xd8\x4d\x8e\x11\xb1\xb8\xb6\xc1\x82\x96\xb4\x9e\x25\xb5\x8b\x41\x5e\xe8\x5c\xa0\x43\x7a\x6b\xb7\x0b\x68\x7f\xb3\x8b\x75\xbd\x06\x55\xbe\xc3\xbf\x9a\x41\x4c\x93\x9b\x54\xab\x42\x32\x2f\x51\x42\xe9\xe3\xbd\xf9\x91\xfb\xbd\x6a\xd6\x3f\x37\xad\x6f\x2c\x96\xe8\xcd\x95\xb2\xa8\xbb\xdd\x39\x65\x8c\xcb\xf4\x18\x9e\x4d\xf3\x35\x4c\xdb\x4d\xb5\x26\xd8\x3b\x3a\xea\xf4\xdc\xb2\x03\x3b\x86\x62\xa5\x19\x6a\xcf\xaa\xfc\x18\x0e\xf2\x35\x18\x25\x38\x83\x3d\x3c\x72\xbf\xfb\xd1\xf8\x92\x96\x9e\x3b\xab\x3d\x64\x8d\x91\x58\xd0\xe4\xa6\xdd\x3d\x57\xd2\x7a\x2b\xe4\x69\x66\x8f\x21\x56\x82\x0d\xd5\x86\x41\x45\xdb\x43\x02\xd0\x52\xb9\xe2\x92\xa9\x95\xaf\xa4\x50\x94\x41\x04\xf3\x42\x26\x96\x2b\x39\x9e\xb4\x38\xf8\x1c\xc6\x42\x25\xd4\xcd\xfa\x19\x35\x19\xfc\x10\x45\x30\x1a\x4d\xe0\xf1\x78\x44\xff\xa8\xcf\xf2\x08\x9e\xc0\x50\xe8\x09\x8c\xc8\x9f\xa3\x89\x6f\x69\x3c\x1e\x99\x4c\xad\x46\x93\x16\x6c\xb5\x8f\x51\x4b\x3d\xab\xd2\x54\x38\x74\x34\xae\x84\x63\x2e\xd9\x78\x94\x08\x9e\xdc\x8c\x9e\x6e\xb1\xe0\xa4\x63\x65\x68\x24\x82\xc7\x63\xf4\x2d\xd5\x29\xda\x89\x4f\xad\xd5\xe3\x91\x03\x34\x9a\xf8\xa6\x88\x8d\xd5\xe3\xfd\xce\xea\xe7\xc9\xab\x47\x4d\x37\x08\xa0\xb2\xc1\x65\x0a\x4a\x82\xcd\x10\x4c\x11\x2f\x30\xb1\xb0\xe2\x42\x40\x0d\xab\x9a\x67\x68\x29\x17\xc6\xef\xa0\x83\x03\x2b\x90\xc0\xc4\x67\x28\x30\xa5\x16\xdd\x9c\x06\xbf\x52\x49\x9e\x02\x90\xb6\xd7\x39\x00\xb0\xf5\xe0\xf1\xd8\x66\xdc\x4c\xfc\x44\x28\x83\xc6\x8e\x47\x56\x8f\x26\xbe\xc4\x75\xdb\xad\xad\x8f\xbf\x00\xfc\xe7\x9c\x51\x8b\xa0\x0a\x0d\xb4\xbe\xcb\xb1\x44\xbd\x81\xc3\x29\x18\x4c\x94\x64\x1d\xd6\xa2\x92\xfc\x47\x2d\xb5\x55\x67\xd0\x5e\x48\x8b\xba\xa4\x62\xdc\x8b\xf6\x2d\x71\xf8\xfc\x14\x0e\xa7\xd3\xe9\x74\x72\x2b\xc9\xba\x83\x1a\x06\x6d\x81\x09\x63\xc5\x36\x4d\xe2\x49\x5a\x42\x22\xa8\x31\x11\x91\xb4\x8c\xa9\x86\xba\xf1\x18\xce\x69\x21\xb6\xc9\x17\x32\xde\x49\xba\x62\x42\xb9\x44\xed\xcd\x45\xc1\x59\x27\x33\x94\x6a\x14\xd5\x47\xa5\x27\xe3\x00\x14\xd6\xba\x60\x56\xe9\x5e\x0f\xc8\xce\xb6\x26\xae\x89\x12\x82\xe6\x06\x19\x81\x41\x16\xb6\xf3\xed\x74\x95\x56\x11\xd9\xab\x77\x13\xa0\x9a\x53\x0f\xd7\x39\x95\x0c\x59\x44\xe6\x54\x38\xd9\x6a\xd6\xa1\xd7\x4a\x74\xa6\x06\xd0\xdc\x59\xcc\xa9\x6c\xc1\x18\xed\x29\x29\x36\x64\x76\x5d\xc3\x91\xb4\xe4\x69\x95\xd4\x61\xe0\xe4\xee\xd9\xca\x13\x25\xbd\x4a\xfd\xff\x4a\x34\x0c\x6a\x2a\x07\x73\x74\x87\xd7\x58\x53\xc9\x48\x53\xd6\x03\x32\xbb\xaa\xae\x75\xa8\xde\x1a\x70\x21\x19\xae\xc3\x80\xf6\x02\x1a\x30\x5e\xee\xc4\x97\xb3\x8e\xba\x1d\xe5\x6d\x54\xba\xb0\x0d\xc3\x5e\x88\x9e\x7c\x9b\x68\x92\x96\xbb\x11\x10\x7c\x16\xd2\x2d\xc4\xd7\x6a\x89\x0e\x54\x18\x08\x3e\xf4\xb7\x10\x0f\xd2\xdf\x76\xb5\xbb\x8c\x6f\x1b\x83\x9e\x35\xa1\x52\x55\x58\x32\xbb\xac\xda\xff\x6c\x75\xc0\x4f\x6f\x10\x06\x92\x96\xf7\x9e\x9d\xfe\xa9\xc9\x0e\x9a\xc7\x5e\x18\x64\x07\xbd\xf9\x5b\x0e\x79\x96\xc6\xee\xa9\xc0\x22\xb2\xdc\x5c\xd3\x78\xc8\xaf\xe0\xad\x38\x4d\x2c\x2f\x91\x38\xc7\x6e\x5d\xde\x8d\xab\x7b\x9a\x72\x77\xae\x66\x1f\xaa\xf6\x4e\x57\xeb\x40\x7c\x51\x03\x4d\x6e\xa4\x5a\x09\x64\xa9\xd3\x73\xd2\x1b\x7d\x8b\xb6\x1c\xa5\x2b\xef\x64\x76\x55\x77\x6e\xeb\xa8\xa9\xbf\xf3\xb2\xb1\x34\xf6\x9a\x37\xee\x90\x93\x36\x61\x1b\x6f\xfb\xf2\x39\x95\x08\x73\xca\x10\xb8\x84\x96\xb1\x61\x72\xe4\xb3\xff\x93\xb1\xc9\x5f\x85\x41\xbe\xb3\x52\x55\x96\x9e\xe6\xe6\x32\xee\x1b\x70\x65\xc9\xfd\xf5\x8c\xd5\x3c\x47\xd6\x8c\x32\x55\xa2\x6e\xfa\xf5\x3b\xa4\x5b\x72\x35\x01\x65\x85\x73\x68\xce\x19\xd4\xb3\xd0\x66\xb3\xbd\x30\xb0\x59\xd5\xfb\xa8\x0a\x9d\xe0\x76\x58\x57\xc5\x6e\x7c\x49\x8d\x85\xb7\xca\xf2\x39\x47\x06\x27\xdb\x85\x93\xaa\x8c\x98\x7a\x1c\x58\xbd\xe3\x58\x50\x41\x19\x66\xfc\xe0\x0e\xe8\x91\x3a\x48\x80\x3b\xa9\xfd\x16\x42\xfb\x5a\xff\x72\xb4\x7e\x47\xf6\xda\x84\xff\x6e\xc4\x35\x0a\xff\x72\x9c\x55\x37\x0c\x5c\xf3\x25\x7e\x37\x1a\xef\xba\x77\x1f\xdd\x41\xd5\xb7\x0c\xea\x0b\xbc\x79\xee\x3b\x5e\xeb\x6e\xc7\x67\xb3\xd2\xff\x2a\x20\xa0\x95\xbb\xcf\xb6\xef\x83\xfb\x1f\x4e\x5f\x78\x32\x25\x4a\x78\x4b\xe6\x3d\xbf\xa7\x6c\xde\x51\xbe\xb6\x8b\xdd\x63\xab\x0e\x08\x9c\x2a\x86\xbb\xd7\xf0\x4e\x7d\x6d\x3f\x5d\x53\x6e\xb3\x22\xae\xbe\x56\xcd\xcd\xba\xf9\xda\x23\xb3\x93\x92\x72\x51\xe5\x8f\x92\x50\xcb\x7c\x65\x51\xfc\x6a\x0f\xe1\x61\x2e\x9e\xaa\x7c\x53\x15\xf4\x07\x3a\x58\x85\xcb\xbf\xc1\x65\xee\xcf\x79\x40\x66\x1f\xdd\x18\xfe\x86\xcb\xfc\xbf\xa9\xf2\x75\xf8\xeb\xf7\x75\xfd\xac\x0e\x83\xfa\x5f\x3c\xff\x0e\x00\x00\xff\xff\x8e\xc4\x82\xd9\xf3\x11\x00\x00"

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 4595, mode: os.FileMode(420), modTime: time.Unix(1522125801, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLoginHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x7b\x6f\xdb\xb6\x16\xff\xbf\x9f\x82\x97\x29\x6e\x13\xdc\x2b\xcb\x79\x35\x89\x23\x19\x08\x92\x22\xcd\x96\x36\xcf\xb5\x6b\xff\xa3\x44\x4a\xa2\x4d\x91\x0c\x49\x29\x76\x8b\x7e\xf7\x81\xd4\xc3\x96\xec\x64\xe9\x06\x0c\x83\x01\x9b\x87\x3c\x3c\x8f\xdf\xe1\x79\x38\xf8\xcf\xd9\xd5\xe9\xfd\x97\xeb\x77\x20\x33\x39\x1b\xbf\x0a\xec\x0f\x60\x88\xa7\x21\x24\x1c\x8e\x5f\x01\x10\x64\x04\x61\xbb\x00\x20\x30\xd4\x30\x32\xbe\x14\x29\xe5\xe0\x96\x3c\x14\x54\x11\x1c\xf8\xd5\x6e\xc5\x91\x13\x83\x00\x47\x39\x09\x61\x49\xc9\xa3\x14\xca\x40\x10\x0b\x6e\x08\x37\x21\x7c\xa4\xd8\x64\x21\x26\x25\x8d\x89\xe7\x88\xff\x03\xca\xa9\xa1\x88\x79\x3a\x46\x8c\x84\xdb\x70\xfc\xaa\x92\xc4\x28\x9f\x82\x4c\x91\x24\x84\x99\x31\x52\x8f\x7c\x3f\x47\xb3\x18\xf3\x41\x24\x84\xd1\x46\x21\x69\x89\x58\xe4\x7e\xbb\xe1\xef\x0e\x76\x07\x6f\xfd\x58\xeb\xc5\xde\x20\xa7\x7c\x10\x6b\x0d\x81\x22\x2c\x84\xda\xcc\x19\xd1\x19\x21\x06\xd6\x26\xeb\x58\x51\x69\x80\x56\xf1\x42\x53\x2c\x30\x19\x4c\x1e\x0a\xa2\xe6\x4e\x43\xb5\xf4\xb6\x07\xdb\x3b\x83\x3d\x27\x71\xa2\x21\xa0\xdc\x90\x54\x51\x33\x0f\xa1\xce\xd0\xee\xe1\x9e\xc7\xcb\x13\x34\xfc\xdf\xdb\x9b\xf4\x28\x66\x8f\x5f\x4e\xcf\xcf\xaf\xe5\xd9\xcd\xe5\x27\x79\xf9\x91\x0f\x93\x5b\x74\x7b\x35\x79\xff\xa0\xb7\x77\xcd\xde\x79\x3a\xd9\x7d\xf7\x6d\x7f\xf8\x3b\x3f\xbf\x79\x88\x7d\x75\xf8\x21\xe3\xb7\x67\x5f\x21\x88\x95\xd0\x5a\x28\x9a\x52\x1e\x42\xc4\x05\x9f\xe7\xa2\xd0\x70\x1c\xf8\x95\x9d\xcf\x18\xfd\x32\x78\x0e\xfc\x49\x1f\x9d\xf5\xbe\xdc\xc7\xfb\x17\x37\x34\x1a\xee\x1c\x3c\x94\xf3\xc9\xdd\x87\xe4\xfd\xe4\xea\x03\xba\x9c\x26\xc5\xe7\x4f\xb3\xaf\xb3\xdf\xae\xf9\xe9\x2f\x27\x07\x6c\x27\x3f\xfd\xfc\xf1\x42\x9e\x1f\xe5\xe7\xa7\x67\x87\x8f\xe7\x1f\x2f\xe2\xeb\xb3\x83\xfb\x19\x7a\xb9\x2f\x36\x24\xc0\xcc\x25\x09\xa1\x21\x33\x63\xe3\x57\x07\x07\xb8\x77\x09\xbe\xd7\x44\x84\xe2\x69\xaa\x44\xc1\xb1\x17\x0b\x26\xd4\x68\x23\x39\xb2\x9f\xe3\xfa\xfc\x47\xfd\x3b\xd0\x86\x94\xc4\x4b\x84\x30\x44\xb5\xb7\x25\xc2\x98\xf2\x74\x04\xf6\x86\x72\x06\x86\xcd\xa5\x4a\x12\xd8\x38\x3a\x6a\xe5\xac\xe8\x01\x3d\x45\x91\x50\x98\x28\xcf\x08\x39\x02\x3b\x72\x06\xb4\x60\x14\x83\x0d\x72\x64\x3f\xcf\x5b\x33\xe0\xa8\xf4\x6c\x4e\x2d\x59\x56\x2b\x89\x18\x8a\xa7\xcd\xed\x44\x70\xe3\x3d\x12\x9a\x66\x66\x04\x22\xc1\x70\x57\x6c\xe0\x3b\xd8\xba\xcf\x61\x09\xc3\x09\x2a\x51\xb5\x5b\x43\xf9\x7a\x13\x60\x11\x17\x39\xe1\x06\x6c\x0d\x14\x41\x78\xbe\x99\x14\x3c\x36\x54\xf0\xcd\x2d\xf0\x1d\xbc\xde\x7c\x43\xb9\x2c\xcc\xc8\xde\x1f\x95\x54\xd3\x88\x91\x51\x42\x95\x36\x6f\xb6\x06\x89\x88\x0b\xbd\xb9\x75\x0c\x7e\x6c\x35\xfa\xdb\x18\x06\x7e\x53\x23\x82\x48\xe0\x79\x13\xba\x80\xa3\x12\xc4\x0c\x69\x1d\x42\x8e\xca\x08\x29\x50\xfd\x78\x98\x24\xa8\x60\xa6\x0d\x32\x00\x01\xa6\x2d\xaf\x2d\x17\x88\x72\xa2\xbc\x84\x15\x14\x2f\x71\x75\xf9\x6a\x61\x15\x96\x1d\x2e\x6b\x48\x61\x8c\xe0\x35\x22\x15\x01\x7b\x17\x8d\x48\x53\x46\x2c\xf8\x0c\x49\x4d\x30\x04\x18\x19\x54\x6f\x5b\x33\xaa\xfd\x66\x1b\xa9\x94\x98\x10\x6e\x54\xb7\x21\x40\x8a\x22\x8f\xcc\x24\xe2\x98\xe0\x10\x26\x88\x59\x5e\xb7\x6b\x3d\x50\x82\xb5\xaa\x7a\xc6\xd9\x80\x49\xc4\x1b\x73\xb4\xf2\x04\x67\x73\x38\xbe\xaf\x0c\xe2\xa8\xa4\x29\xb2\x71\x09\x7c\xcb\xf7\xec\x65\x1a\x0b\xee\x39\x15\xff\x2c\x73\xe0\x57\xa0\xf6\x76\x51\x0f\xe3\x48\x21\x8e\x61\x5d\xc7\x7d\x38\xbe\x2e\x94\x64\x04\x9c\x30\xa2\x0c\xb8\xe0\x98\xcc\x02\x1f\x75\x02\xec\x63\x5a\xae\x44\x9c\xe2\x16\xca\x9e\x82\x26\x4a\x6d\x18\xfb\x0f\xa1\x60\x4b\x37\x9a\x07\xc8\x51\xb9\x1a\x13\x46\xc7\x01\x5a\x98\xfa\x5e\xe4\xc4\x1a\x17\xf8\x8c\xf6\x7d\x2f\xd8\x33\x36\x77\xc8\xc0\xe7\xa8\xac\x7b\xda\x13\xcf\xbc\x9f\x06\xd6\x59\x66\x7b\x6c\x24\x66\x10\xb8\x34\x0f\x61\x8e\x54\x4a\xb9\xab\x38\xfb\x43\x39\x3b\x6e\x71\xc8\x91\x63\xb4\xfe\x7b\x39\xf6\xde\x36\x0b\x91\x24\x9a\x18\x6f\xd7\xd1\x3a\xf7\x0e\x9b\x45\x7d\xb0\xf3\x64\x5e\x49\xc4\x09\x03\xee\xdb\xa3\x3c\x11\x10\xf4\xdc\xef\xf3\xba\x14\xa4\x3c\x5d\x85\x74\x85\xd3\xcd\x0a\xb0\x1a\x21\x56\x42\xbd\x26\xfa\xb5\x8c\x1a\x84\xba\x82\x3b\x14\x76\x87\x72\x06\xbb\xc2\x6d\xf1\xe9\x1b\xdb\x15\x80\xa9\x96\x0c\xcd\x47\x5c\x70\x02\x17\x40\x7b\xc8\xbe\xc7\x56\x9a\xa3\x80\xfb\xf6\x30\xe2\x29\x51\x0d\x76\xdb\x3b\x36\x1b\x56\x6c\x04\x20\x48\x84\xca\x17\x02\x2d\xd5\x8a\xb3\x84\x97\x09\x45\xbf\xd9\x88\x33\x08\x94\xb0\xb6\x54\x3c\xc8\x15\xe0\x10\xfa\xee\x1e\x04\x39\x31\x99\xc0\x21\xbc\xbe\xba\xbb\x5f\xc1\xb3\xeb\x4c\xfd\x24\x22\x61\x8c\xc8\x47\x60\x67\x7f\x09\x10\x57\xc9\x3d\xdb\xc3\xe4\x1a\x29\xfd\x4c\x5f\x30\x7b\x08\x63\xc1\xe1\x38\xa0\xcd\x61\xca\xe6\x32\xb3\xb5\x00\xb4\x2b\xaf\xd0\xc4\x95\x05\xfa\x44\x1d\x71\x1a\x9c\xd4\x3a\x73\x73\x02\x97\x9a\x53\x17\x99\xba\x58\xc2\x7a\x6c\xac\x98\x4b\xc4\x0a\x12\x42\x08\x24\x43\x31\xc9\x04\xc3\x44\x85\xf0\x8b\x28\x14\xb0\xca\x2d\x13\x58\x07\xcf\xba\xd8\xfc\x5b\x50\x63\x22\x9e\xfe\x04\x6a\x12\x69\xfd\x28\x14\x6e\x90\x5b\xd0\xcf\xa0\xb7\x60\x5a\x05\xae\x3d\xfb\x3b\xb8\xd9\xd4\xdb\x5e\x4e\x3d\x67\x85\x43\x01\xc8\x82\x31\x4f\xd9\x89\x65\x3d\x7a\x9d\xe2\x57\xe7\x13\x68\x7a\xe5\xda\x2b\x2d\x20\x15\x04\xba\x88\x72\x6a\xaa\xc4\x6d\xd6\x95\xdf\x0d\x55\xbf\x9b\xcb\x2a\x99\x6a\x65\x91\xe1\x20\x32\xbc\x2a\x66\x6b\x2d\x7b\xc2\xfd\xb5\x99\xee\x5b\x8f\xff\xa4\x6c\x3d\xdf\x11\x1c\xd1\x50\x72\xfc\x5f\x1e\x69\x79\x1c\xf8\x72\xfc\x57\x88\x6a\x1a\xab\x87\x4b\x0b\x4c\xb5\x5c\x8a\x8f\x3b\x59\x9e\x41\x9b\x0a\xb4\x18\x34\x5a\x54\x5e\xd4\xa0\x96\x62\x68\x3b\x4e\xb7\x91\x74\xfa\x6d\xbf\x19\x33\xba\x74\xd8\x4e\x6e\x77\xa2\x50\x31\x01\xa7\x02\x93\x35\xcd\x76\xb9\x2d\x37\x7f\x75\x52\x6a\xb2\x22\x72\xff\x6e\xf4\x74\xe6\x4b\x37\x55\xc0\xf1\x49\x89\x28\x43\x11\x23\xc0\x26\x9e\xe3\x59\xd7\xc1\xbb\xfd\xbb\x1f\xab\x9f\xf3\xb0\x5f\x85\x9e\x70\xf1\x54\xc8\xb9\xcb\x8c\x17\x3a\xe8\xc2\x35\x98\x92\x5c\x0e\x12\xea\xc3\xf1\x9d\xa5\xc1\xaf\x24\x97\x3f\xe9\xd0\x12\x61\x5f\xae\x0d\x7f\x35\xb2\x57\x93\x7a\xe0\x57\x7f\xfc\xff\x08\x00\x00\xff\xff\x19\x60\x74\xe6\x09\x10\x00\x00"

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 4105, mode: os.FileMode(420), modTime: time.Unix(1522069861, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPurpleJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5d\x6b\xe3\x46\x14\x7d\xcf\xaf\x38\x4c\x17\x2c\xd5\x89\xe4\x85\x3e\xad\x2d\x43\xda\x50\x68\xa1\x5b\x68\xfa\x16\x9b\x32\xd1\x5c\x5b\x53\x2b\x1a\x31\x73\x15\xd7\x6c\xfc\xdf\xcb\x8c\x6c\x47\x8e\xe2\xb0\xd9\xd2\x76\x1f\xa2\x97\x38\xf7\xfb\xe3\x9c\x19\x69\xd1\x54\x39\x6b\x53\xa1\xa9\x95\x64\xfa\x43\x96\x64\xd9\x45\xf1\xd9\xa7\x33\x00\x78\x97\x2c\x89\x7f\xbe\xfe\xf5\x63\x04\x91\xd2\x3d\x55\xec\x04\xce\xb1\xf7\x8a\xa0\x24\x4b\xc4\x68\xad\xfd\x73\x2f\x2d\x0a\x64\xf8\xb4\x1d\x1f\x64\xc5\xcd\xc0\x4a\xed\x48\x0d\xe6\xc8\x30\xea\xca\x6b\xaa\x94\xae\x96\x7d\x85\xcc\x57\x95\x59\x97\xa4\x96\x07\xb7\x83\x3a\x4d\xf1\x43\x49\xd2\xc2\x34\x16\x2c\x6f\x4b\x82\x59\xa0\x96\x8e\xd1\xd6\x88\x0b\xdc\x6e\x60\xe9\xce\xdc\xeb\x6a\x09\x59\x96\xb0\x66\xed\x60\x16\xdd\x18\x5c\x50\xeb\x7d\x0e\xfa\x2b\xa7\x9a\xb1\x30\x36\x48\x17\xda\x3a\x46\xb4\x2e\x74\x5e\x40\xbb\x20\x2b\x48\x2a\xb2\x17\xd6\xac\xe3\xe4\x10\xc5\x3b\x44\xbe\xe5\x15\x6d\xa0\x2b\x14\xdd\x51\x84\x01\x46\xe2\x1b\x81\x61\xd0\x0f\x21\x76\xf3\x15\x71\xb2\xd0\x95\x8a\x04\xdb\x0f\x4b\x8e\x46\xb1\x88\x93\x50\x2d\x45\xf1\xe3\xd8\xb6\x8f\x1d\xbf\x4b\x48\xe6\x45\x3b\xee\xee\xf8\x57\xb4\x39\xc7\xbd\x2c\xc3\x0a\x8e\x12\xa7\x29\xbe\x6f\xee\xea\x50\x7a\x6e\x9a\x8a\xfd\x88\xb8\xf0\xcd\x6c\xea\x30\xaf\xb6\x94\xf3\x43\xd3\xac\xb9\xa4\xe4\x28\x88\xef\xcc\xb1\xe4\xc6\x21\xf3\x69\x6e\x06\xd7\xe1\xbf\xc1\x7c\x7c\x64\x57\xdc\xb4\x56\x7e\x4f\x87\xdf\xc3\xf7\xbd\x8a\x7e\xf7\xf9\xb5\x43\x61\xac\xd5\x0a\x17\x58\x13\xd6\xb2\x62\xb0\x81\x2b\xcc\x1a\xa4\xb9\x20\x0b\xb1\xd6\x7e\x65\x1e\x33\x90\x2c\xce\x9f\xc6\x11\xa5\xdf\x75\x65\x58\x2f\x34\xa9\x60\x02\x63\xbd\xa0\xf0\xfb\x56\xb4\x83\x15\x4c\xd5\xb6\xb6\xa9\x9f\x74\xa6\x17\x88\x0e\xad\x65\x10\x2d\x3e\x45\x7f\x8e\xfb\x31\x28\x64\xf8\x45\x72\x91\x58\xd3\x54\x2a\x6a\xa7\xf1\x71\x57\xc1\x25\x0f\xe6\xf8\x16\xef\x47\xa3\x51\xdc\xf3\xf6\x9e\xb5\xb4\x8e\x7e\x2c\x8d\xe4\x48\xc5\xe3\x67\x4d\x2a\x5a\xe3\x4a\x32\x45\x50\x40\x3c\xee\x57\x91\xa6\xd0\x0a\x0f\x70\xa6\xb1\x39\xf9\x1f\xcd\xed\x9f\x94\x33\x1e\x70\x3c\x8e\x07\xc8\x00\x8f\x67\xfb\x60\x64\x10\x13\xb6\xd3\x09\xab\xa9\x47\x66\x68\xe4\xa7\xab\xc1\xdc\xe3\x73\x92\x7a\x69\xbf\x40\xc6\x30\xb8\x75\x5c\xae\x43\x19\x9f\xe9\x86\xbc\x94\xce\x65\x33\x91\x97\x3a\x5f\xcd\xc4\x54\xe0\x10\xa7\xed\xe2\x35\xf9\x15\x3e\xcf\x76\x22\x51\x58\x5a\x64\x33\x91\x76\x8e\x93\xd4\x87\x88\x0e\x6d\xc7\x3e\xd6\x4c\x4c\x65\xbe\x9a\xa4\x72\x2a\x4e\xc4\x43\x27\x58\xee\x0f\x9f\x13\x61\x82\xee\xa5\x40\x6d\xd9\xcf\xae\xf7\x52\xa9\x00\xd7\xc0\xcc\x9e\xc1\xfe\x28\x39\xe2\xe1\x33\x87\xca\x80\x6f\x8d\xda\x0c\xe2\x44\xd6\x9e\x06\x11\xc7\x2f\x26\x53\xc4\x52\x97\x2e\xf9\xc7\xf9\x7a\x01\xfc\xb3\x2f\xc2\x43\x0e\x8e\x37\x25\x65\x33\xa1\xb4\xab\x4b\xb9\xf9\x50\x99\x8a\xc6\x33\x11\xa0\x18\xc6\x12\x90\x62\x4a\x57\xcb\x2a\x9b\x89\xef\xbc\xaa\x7e\x44\xdc\x55\xa8\x74\x0f\x94\x7a\xe7\x92\xb2\x9d\x8a\xe3\xe4\xdb\x17\xa9\xde\xbd\x59\x4e\x10\xfe\x05\xaa\xb5\xd4\x72\x5f\x37\xb7\xbe\x8c\x5a\x1d\x84\x87\xe3\xf0\x04\xc2\x83\xce\x23\xfc\xd5\x94\x78\x83\xfe\xbf\x02\xfd\x57\x60\x7f\x77\x2f\xbe\xf6\x9e\xfb\xcd\xaf\xfc\xed\x92\xfb\xaf\x88\xf8\x85\x77\xdc\x1b\x07\x7b\xcf\xff\x74\xfd\xf4\x5e\x7c\xaf\x89\x4f\xbd\x63\x2b\x93\x37\x77\x54\x71\x12\x74\x1e\xb8\x97\xa1\x3f\xdc\xf8\xcc\xdd\x4f\xa7\x21\x44\xba\x93\x3d\xf9\x3a\xea\x68\x1e\x3f\xa8\x86\x10\x73\xd1\xa1\xd8\x76\xc7\x49\xff\x77\x7b\xf6\x77\x00\x00\x00\xff\xff\x5b\x55\x3c\x14\xf9\x0d\x00\x00"

func dataPurpleJsBytes() ([]byte, error) {
	return bindataRead(
		_dataPurpleJs,
		"data/purple.js",
	)
}

func dataPurpleJs() (*asset, error) {
	bytes, err := dataPurpleJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/purple.js", size: 3577, mode: os.FileMode(420), modTime: time.Unix(1522125912, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
	"data/login.html": dataLoginHtml,
	"data/purple.js":  dataPurpleJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"login.html": &bintree{dataLoginHtml, map[string]*bintree{}},
		"purple.js":  &bintree{dataPurpleJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
