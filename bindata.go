// Code generated by go-bindata.
// sources:
// data/index.html
// data/login.html
// data/purppura.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\xdb\x38\x12\xfe\xde\x5f\x31\xcb\x14\x67\x1b\xad\x24\x27\xe9\xb6\x4d\x2a\x19\x08\x92\x45\xda\xbb\xb4\x4d\xdb\xec\xee\xed\x2e\x16\x07\x4a\x1c\x4b\x74\x68\x52\x25\x29\xd9\xbe\x43\xff\xfb\x81\x7a\xb3\xe4\xa4\xb9\xb4\x57\x2c\x0a\x03\xe1\xdb\x70\xe6\x99\x67\x86\x1c\x2a\xe1\x0f\x67\x6f\x4f\xaf\x7e\xbb\xfc\x09\x32\xbb\x14\xb3\x07\xa1\x6b\x40\x50\x99\x46\x04\x25\x99\x3d\x00\x08\x33\xa4\xcc\x75\x00\x42\xcb\xad\xc0\xd9\x89\x40\x6d\x0d\xfc\x31\x0d\xa6\xc1\xf4\xcf\x30\xa8\x67\x6b\x89\x25\x5a\x0a\x49\x46\xb5\x41\x1b\x91\xc2\xce\xbd\xe7\xa4\xbf\x24\xe9\x12\x23\x52\x72\x5c\xe5\x4a\x5b\x02\x89\x92\x16\xa5\x8d\xc8\x8a\x33\x9b\x45\x0c\x4b\x9e\xa0\x57\x0d\x1e\x03\x97\xdc\x72\x2a\x3c\x93\x50\x81\xd1\x7e\xab\x48\x70\x79\x0d\x99\xc6\x79\x44\x32\x6b\x73\x73\x1c\x04\x4b\xba\x4e\x98\xf4\x63\xa5\xac\xb1\x9a\xe6\x6e\x90\xa8\x65\xd0\x4d\x04\x87\xfe\xa1\xff\x34\x48\x8c\xd9\xce\xf9\x4b\x2e\xfd\xc4\x18\x02\x1a\x45\x44\x8c\xdd\x08\x34\x19\xa2\x6d\x0d\x99\x44\xf3\xdc\x82\xd1\xc9\xd6\x52\xa2\x18\xfa\x8b\x8f\x05\xea\x4d\x65\xa1\xee\x7a\xfb\xfe\xfe\x81\xff\xa4\xd2\xb8\x30\x04\xb8\xb4\x98\x6a\x6e\x37\x11\x31\x19\x3d\x7c\xfe\xc4\x93\xe5\x09\x9d\x3e\x7a\xfa\x2e\x3d\x4a\xc4\xea\xb7\xd3\xf3\xf3\xcb\xfc\xec\xdd\xc5\x2f\xf9\xc5\x1b\x39\x9d\xbf\xa7\xef\xdf\x2e\x5e\x7e\x34\xfb\x87\xf6\xc9\x79\xba\x38\xfc\xe9\xdf\x3f\x4e\xff\x29\xcf\xdf\x7d\x4c\x02\xfd\xfc\x75\x26\xdf\x9f\xfd\x4e\x20\xd1\xca\x18\xa5\x79\xca\x65\x44\xa8\x54\x72\xb3\x54\x85\x21\xb3\x30\xa8\x71\xde\x01\xfa\x7e\xf4\x3c\x0b\x16\xbb\xec\xdc\xee\xcb\x55\xf2\xe3\xab\x77\x3c\x9e\x1e\x3c\xfb\x58\x6e\x16\x1f\x5e\xcf\x5f\x2e\xde\xbe\xa6\x17\xd7\xf3\xe2\xd7\x5f\xd6\xbf\xaf\x7f\xbe\x94\xa7\x7f\x3f\x79\x26\x0e\x96\xa7\xbf\xbe\x79\x95\x9f\x1f\x2d\xcf\x4f\xcf\x9e\xaf\xce\xdf\xbc\x4a\x2e\xcf\x9e\x5d\xad\xe9\x97\xfa\x62\x37\x39\x46\xc4\xe2\xda\x06\x0b\x5a\xd2\x7a\x96\xd4\x2e\x06\x79\xa1\xf3\xbc\xd0\xd4\x61\xbd\xb1\xdf\x85\xb4\xbf\xdd\x45\xbb\x5e\x83\x2a\xe3\xe1\x3f\xcd\x20\xa6\xc9\x75\xaa\x55\x21\x99\x97\x28\xa1\xf4\xf1\xde\xfc\xc8\xfd\x5e\x34\xeb\x9f\x9a\xd6\x37\x16\x4b\xf4\xe6\x4a\x59\xd4\xdd\xee\x9c\x32\xc6\x65\x7a\x0c\x4f\xa6\xf9\x1a\xa6\xed\xa6\x5a\x13\xec\x1d\x1d\x75\x7a\x6e\xd8\x81\x1d\x43\xb1\xd2\x0c\xb5\x67\x55\x7e\x0c\x07\xf9\x1a\x8c\x12\x9c\xc1\x1e\x1e\xb9\xdf\xdd\x68\x7c\x49\x4b\xcf\x9d\xd6\x1e\xb2\xc6\x48\x2c\x68\x72\xdd\xee\x9e\x2b\x69\xbd\x15\xf2\x34\xb3\xc7\x10\x2b\xc1\x86\x6a\xc3\xa0\xa2\xed\x3e\x21\x68\xa9\x5c\x71\xc9\xd4\xca\x57\x52\x28\xca\x20\x82\x79\x21\x13\xcb\x95\x1c\x4f\x5a\x1c\x7c\x0e\x63\xa1\x12\xea\x66\xfd\x8c\x9a\x0c\x7e\x88\x22\x18\x8d\x26\xf0\x70\x3c\xa2\x7f\xd4\xa7\x79\x04\x8f\x60\x28\xf4\x08\x46\xe4\xcf\xd1\xc4\xb7\x34\x1e\x8f\x4c\xa6\x56\xa3\x49\x0b\xb6\xda\xc7\xa8\xa5\x9e\x55\x69\x2a\x1c\x3a\x1a\x57\xc2\x31\x97\x6c\x3c\x4a\x04\x4f\xae\x47\x8f\xb7\x58\x70\xd2\xb1\x32\x34\x12\xc1\xc3\x31\xfa\x96\xea\x14\xed\xc4\xa7\xd6\xea\xf1\xc8\x01\x1a\x4d\x7c\x53\xc4\xc6\xea\xf1\x7e\x67\xf5\xd3\xe4\xc5\x83\xa6\x1b\x04\x50\xd9\xe0\x32\x05\x25\xc1\x66\x08\xa6\x88\x17\x98\x58\x58\x71\x21\xa0\x86\x55\xcd\x33\xb4\x94\x0b\xe3\x77\xd0\xc1\x81\x15\x48\x60\xe2\x33\x14\x98\x52\x8b\x6e\x4e\x83\x5f\xa9\x24\x8f\x01\x48\xdb\xeb\x1c\x00\xd8\x7a\xf0\x70\x6c\x33\x6e\x26\x7e\x22\x94\x41\x63\xc7\x23\xab\x47\x13\x5f\xe2\xba\xed\xd6\xd6\xc7\x9f\x01\xfe\x73\xce\xa8\x45\x50\x85\x06\x5a\xdf\xe6\x58\xa2\xde\xc0\xe1\x14\x0c\x26\x4a\xb2\x0e\x6b\x51\x49\xfe\xab\x96\xda\xaa\x33\x68\x5f\x49\x8b\xba\xa4\x62\xdc\x8b\xf6\x0d\x71\xf8\xf4\x18\x0e\xa7\xd3\xe9\x74\x72\x23\xc9\xba\x83\x1a\x06\x6d\x89\x09\x63\xc5\x36\x4d\xe2\x49\x5a\x42\x22\xa8\x31\x11\x91\xb4\x8c\xa9\x86\xba\xf1\x18\xce\x69\x21\xb6\xc9\x17\x32\xde\x49\xba\x72\x42\xb9\x44\xed\xcd\x45\xc1\x59\x27\x33\x94\x6a\x14\xd5\x47\xa5\x27\xe3\x00\x14\xd6\xba\x60\x56\xe9\x5e\x0f\xc8\xce\xb6\x26\xae\x89\x12\x82\xe6\x06\x19\x81\x41\x16\xb6\xf3\xed\x74\x95\x56\x11\xd9\xab\x77\x13\xa0\x9a\x53\x0f\xd7\x39\x95\x0c\x59\x44\xe6\x54\x38\xd9\x6a\xd6\xa1\xd7\x4a\x74\xa6\x06\xd0\xdc\x59\xcc\xa9\x6c\xc1\x18\xed\x29\x29\x36\x64\x76\x55\xc3\x91\xb4\xe4\x69\x95\xd4\x61\xe0\xe4\xee\xd8\xca\x13\x25\xbd\x4a\xfd\x5f\x25\x1a\x06\x35\x95\x83\x39\xba\xc3\x6b\xac\xa9\x64\xa4\x29\xec\x01\x99\x5d\x36\x17\x7b\x18\xd0\x5e\x18\x03\xc6\xcb\x9d\xa8\x72\xd6\x11\xb6\xa3\xb2\x8d\x45\x17\xac\x61\xb0\x0b\xd1\x93\x6f\xd3\x4b\xd2\x72\x97\x77\xc1\x67\x21\xdd\x02\x7b\xa9\x96\xe8\x40\x85\x81\xe0\x43\x2f\x0b\x71\x2f\xfd\x6d\x57\xbb\x2b\xf8\xa6\x31\xe8\x59\x13\x2a\x55\x85\x25\xb3\x8b\xaa\xfd\xdf\x56\x07\xfc\xf4\x06\x61\x20\x69\x79\xe7\x89\xe9\x9f\x95\xec\xa0\x79\xe4\x85\x41\x76\xd0\x9b\xbf\xe1\x90\x67\x69\xec\x9e\x08\x2c\x22\xcb\xcd\x15\x8d\x87\xfc\x0a\xde\x8a\xd3\xc4\xf2\x12\x89\x73\xec\xc6\x95\xdd\xb8\xba\xa7\x29\x77\xa7\x69\xf6\xbe\x6a\x6f\x75\xb5\x0e\xc4\x67\x35\xd0\xe4\x5a\xaa\x95\x40\x96\x3a\x3d\x27\xbd\xd1\xd7\x68\xcb\x51\xba\xa2\x4e\x66\x97\x75\xe7\xa6\x8e\x9a\xfa\x5b\xaf\x18\x4b\x63\xaf\x79\xdb\x0e\x39\x69\x13\xb6\xf1\xb6\x2f\x9f\x53\x89\x30\xa7\x0c\x81\x4b\x68\x19\x1b\x26\x47\x3e\xfb\x9b\x8c\x4d\xfe\x22\x0c\xf2\x9d\x95\xaa\x9e\xf4\x34\x37\x57\x70\xdf\x80\x2b\x46\xee\xaf\x67\xac\xe6\x39\xb2\x66\x94\xa9\x12\x75\xd3\xaf\x5f\x1f\xdd\x92\xab\x04\x28\x2b\x9c\x43\x73\xce\xa0\x9e\x85\x36\x9b\xed\x85\x81\xcd\xaa\xde\x07\x55\xe8\x04\xb7\xc3\xba\x16\x76\xe3\x0b\x6a\x2c\xbc\x51\x96\xcf\x39\x32\x38\xd9\x2e\x9c\x54\xc5\xc3\xd4\xe3\xc0\xea\x1d\xc7\x82\x0a\xca\x30\xe3\x07\x77\x40\x8f\xd4\x41\x02\xdc\x4a\xed\xd7\x10\xda\xd7\xfa\xdd\xd1\xfa\x0d\xd9\x6b\x13\xfe\x9b\x11\xd7\x28\xfc\xee\x38\xab\x6e\x18\xb8\xe2\x4b\xfc\x66\x34\xde\x76\xef\x3e\xb8\x85\xaa\xaf\x19\xd4\x17\x78\xf3\xc8\x77\xbc\xd6\xdd\x8e\xcf\x66\xa5\xff\x2d\x40\x40\x2b\x77\x9f\x6d\x5f\x05\x77\x3f\x97\x3e\xf3\x50\x4a\x94\xf0\x96\xcc\x7b\x7a\x47\xd9\xbc\xa5\x7c\x6d\x17\xbb\x27\x56\x1d\x10\x38\x55\x0c\x77\xaf\xe1\x9d\xfa\xda\x7e\xb2\xa6\xdc\x66\x45\x5c\x7d\xa5\x9a\xeb\x75\xf7\x95\x47\x66\x27\x25\xe5\xa2\xca\x20\x25\xa1\x96\xfa\xc2\xb2\xf8\xc5\x3e\xc2\xfd\x9c\x3c\x55\xf9\xa6\x2a\xe9\xf7\x74\xb1\x0a\x98\x7f\x8d\xcb\xdc\x9f\xf3\x80\xcc\x3e\xb8\x31\xfc\x03\x97\xf9\xff\x53\xe7\xeb\x04\xa8\xdf\xd5\xf5\x73\x3a\x0c\xea\x7f\xee\xfc\x37\x00\x00\xff\xff\xee\xb3\x5e\x6e\xed\x11\x00\x00"

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 4589, mode: os.FileMode(420), modTime: time.Unix(1522230512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLoginHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x7b\x6f\xdb\xba\x15\xff\xbf\x9f\x82\x63\x2e\x76\x13\x6c\xb2\x9c\x57\x93\x38\x92\x81\x22\xb9\x48\xbb\xa5\xcd\x73\xed\xda\xff\x8e\x44\x4a\xa6\x43\x91\x0c\x49\x29\x76\x8b\x7e\xf7\x81\xd4\xc3\xb6\xec\x64\xe9\x06\x0c\x83\x01\x9b\x87\x3c\x3c\x8f\xdf\xe1\x79\x38\xfa\xd3\xf9\xd5\xd9\xfd\xd7\xeb\x3f\xd0\xc4\x16\x7c\xfc\x26\x72\x3f\x88\x83\xc8\x63\x4c\x05\x1e\xbf\x41\x28\x9a\x50\x20\x6e\x81\x50\x64\x99\xe5\x74\x7c\x29\x73\x26\xd0\x2d\x7d\x2c\x99\xa6\x24\x0a\xeb\xdd\x9a\xa3\xa0\x16\x90\x80\x82\xc6\xb8\x62\xf4\x49\x49\x6d\x31\x4a\xa5\xb0\x54\xd8\x18\x3f\x31\x62\x27\x31\xa1\x15\x4b\x69\xe0\x89\xbf\x22\x26\x98\x65\xc0\x03\x93\x02\xa7\xf1\x2e\x1e\xbf\xa9\x25\x71\x26\x1e\xd0\x44\xd3\x2c\xc6\x13\x6b\x95\x19\x85\x61\x01\xb3\x94\x88\x41\x22\xa5\x35\x56\x83\x72\x44\x2a\x8b\xb0\xdb\x08\xf7\x07\xfb\x83\xb7\x61\x6a\xcc\x62\x6f\x50\x30\x31\x48\x8d\xc1\x48\x53\x1e\x63\x63\xe7\x9c\x9a\x09\xa5\x16\x37\x26\x9b\x54\x33\x65\x91\xd1\xe9\x42\x53\x2a\x09\x1d\x4c\x1f\x4b\xaa\xe7\x5e\x43\xbd\x0c\x76\x07\xbb\x7b\x83\x03\x2f\x71\x6a\x30\x62\xc2\xd2\x5c\x33\x3b\x8f\xb1\x99\xc0\xfe\xf1\x41\x20\xaa\x77\x30\xfc\xcb\xdb\x9b\xfc\x24\xe5\x4f\x5f\xcf\x2e\x2e\xae\xd5\xf9\xcd\xe5\x67\x75\xf9\x49\x0c\xb3\x5b\xb8\xbd\x9a\xbe\x7f\x34\xbb\xfb\xf6\xe0\x22\x9f\xee\xff\xf1\xfd\x70\xf8\x4f\x71\x71\xf3\x98\x86\xfa\xf8\xe3\x44\xdc\x9e\x7f\xc3\x28\xd5\xd2\x18\xa9\x59\xce\x44\x8c\x41\x48\x31\x2f\x64\x69\xf0\x38\x0a\x6b\x3b\x5f\x30\xfa\x75\xf0\x1c\x85\xd3\x3e\x3a\x9b\x7d\xb9\x4f\x0f\x3f\xdc\xb0\x64\xb8\x77\xf4\x58\xcd\xa7\x77\x1f\xb3\xf7\xd3\xab\x8f\x70\xf9\x90\x95\x5f\x3e\xcf\xbe\xcd\xfe\x71\x2d\xce\xfe\xf6\xee\x88\xef\x15\x67\x5f\x3e\x7d\x50\x17\x27\xc5\xc5\xd9\xf9\xf1\xd3\xc5\xa7\x0f\xe9\xf5\xf9\xd1\xfd\x0c\x5e\xef\x8b\x0b\x09\xb2\x73\x45\x63\x6c\xe9\xcc\xba\xf8\x35\xc1\x41\xfe\x5d\xa2\x1f\x0d\x91\x40\xfa\x90\x6b\x59\x0a\x12\xa4\x92\x4b\x3d\xda\xca\x4e\xdc\xe7\xb4\x39\xff\xd9\xfc\x0e\x8c\xa5\x15\x0d\x32\x29\x2d\xd5\xdd\x6d\x05\x84\x30\x91\x8f\xd0\xc1\x50\xcd\xd0\xb0\xbd\x54\x4b\x42\x5b\x27\x27\x9d\x9c\x35\x3d\xa8\xa7\x28\x91\x9a\x50\x1d\x58\xa9\x46\x68\x4f\xcd\x90\x91\x9c\x11\xb4\x45\x4f\xdc\xe7\x65\x6b\x06\x02\xaa\xc0\xe5\xd4\x92\x65\x8d\x92\x84\x43\xfa\xd0\xde\xce\xa4\xb0\xc1\x13\x65\xf9\xc4\x8e\x50\x22\x39\x59\x15\x1b\x85\x1e\xb6\xd5\xe7\xb0\x84\xe1\x14\x2a\xa8\x77\x1b\x28\x7f\xdb\x46\x44\xa6\x65\x41\x85\x45\x3b\x03\x4d\x81\xcc\xb7\xb3\x52\xa4\x96\x49\xb1\xbd\x83\x7e\xa0\xdf\xb6\x7f\x67\x42\x95\x76\xe4\xee\x8f\x2a\x66\x58\xc2\xe9\x28\x63\xda\xd8\xdf\x77\x06\x99\x4c\x4b\xb3\xbd\x73\x8a\x7e\xee\xb4\xfa\xbb\x18\x46\x61\x5b\x23\xa2\x44\x92\x79\x1b\xba\x48\x40\x85\x52\x0e\xc6\xc4\x58\x40\x95\x80\x46\xf5\x4f\x40\x68\x06\x25\xb7\x5d\x90\x11\x8a\x08\xeb\x78\x5d\xb9\x00\x26\xa8\x0e\x32\x5e\x32\xb2\xc4\xb5\xca\xd7\x08\xab\xb1\x5c\xe1\x72\x86\x94\xd6\x4a\xd1\x20\x52\x13\xb8\x77\xd1\xca\x3c\xe7\xd4\x81\xcf\x41\x19\x4a\x30\x22\x60\xa1\xd9\x76\x66\xd4\xfb\xed\x36\xe8\x9c\xda\x18\x6f\xd5\xb7\x31\x02\xcd\x20\xa0\x33\x05\x82\x50\x12\xe3\x0c\xb8\xe3\xf5\xbb\xce\x03\x2d\x79\xa7\xaa\x67\x9c\x0b\x98\x02\xd1\x9a\x63\x74\x20\x05\x9f\xe3\xf1\x7d\x6d\x90\x80\x8a\xe5\xe0\xe2\x12\x85\x8e\xef\xc5\xcb\x2c\x95\x22\xf0\x2a\xfe\xb7\xcc\x51\x58\x83\xda\xdb\x85\x1e\xc6\x89\x06\x41\x70\x53\xc7\x43\x3c\xbe\x2e\xb5\x52\xa5\x86\x28\x84\x95\xb0\x86\x84\x55\x6b\x71\x66\xa4\x03\xb0\x27\xb6\x8d\x4d\x17\xbc\x7e\xf8\x4b\xbe\x74\xa3\x7d\x76\x02\xaa\xf5\x48\x70\x36\x8e\x60\x61\xe0\x7b\x59\x50\x67\x5c\x14\x72\xd6\xf7\xb8\xe4\x2f\xd8\xbc\x42\x46\xa1\x80\xaa\xe9\x64\xcf\x3c\xee\xfe\xe3\x77\xce\x72\xd7\x59\x13\x39\xc3\xc8\x27\x77\x8c\x0b\xd0\x39\x13\xbe\xce\x1c\x0e\xd5\xec\xb4\xc3\xa1\x00\xcf\xe8\xfc\x0f\x0a\x12\xbc\x6d\x17\x32\xcb\x0c\xb5\xc1\xbe\xa7\x4d\x11\x1c\xb7\x8b\xe6\x60\xef\xd9\x6c\x52\x20\x28\x47\xfe\x3b\x60\x22\x93\x18\xf5\xdc\xef\xf3\xfa\xc4\x63\x22\x5f\x87\x74\x8d\xd3\x4f\x08\xb8\x1e\x1c\xd6\x42\xbd\x21\xfa\x8d\x8c\x06\x84\xa6\x6e\x7b\x14\xf6\x87\x6a\x86\x57\x85\xbb\x92\xd3\x37\x76\x55\x00\x61\x46\x71\x98\x8f\x84\x14\x14\x2f\x80\x0e\x80\x53\x3f\x9e\xd4\xd2\x3c\x85\xfc\x77\x40\x40\xe4\x54\xb7\xd8\xed\xee\xb9\x1c\x58\xb3\x11\xa1\x28\x93\xba\x58\x08\x74\x54\x27\xce\x11\xc1\x44\x6a\xf6\xdd\x45\x9c\x63\xa4\xa5\xb3\xa5\xe6\x01\x5f\x76\x63\x1c\xfa\x7b\x18\x15\xd4\x4e\x24\x89\xf1\xf5\xd5\xdd\xfd\x1a\x9e\xab\xce\x34\x4f\x22\x91\xd6\xca\x62\x84\xf6\x0e\x97\x00\xf1\xf5\x3b\x70\x9d\x4b\x6d\x90\xd2\xcf\xef\x05\x73\x00\x84\x48\x81\xc7\x11\x6b\x0f\x73\x3e\x57\x13\x57\x01\x50\xb7\x0a\x4a\x43\x7d\x31\x60\xcf\x54\x0f\xaf\xc1\x4b\x6d\x32\xb7\xa0\x78\xa9\x25\xad\x22\xd3\x94\x48\xdc\x0c\x8b\x35\x73\x05\xbc\xa4\x31\xc6\x48\x71\x48\xe9\x44\x72\x42\x75\x8c\xbf\xca\x52\x23\xa7\xdc\x31\xa1\x4d\xf0\x6c\x8a\xcd\xff\x0b\x6a\x5c\xa6\x0f\xbf\x80\x9a\x02\x63\x9e\xa4\x26\x2d\x72\x0b\xfa\x05\xf4\x16\x4c\xeb\xc0\x75\x67\xff\x0d\x6e\x2e\xf5\x76\x97\x53\xcf\x5b\xe1\x51\x40\xaa\xe4\x3c\xd0\x6e\x4e\xd9\x8c\xde\x4a\xf1\x6b\xf2\x09\xb5\x1d\x72\xe3\x95\x0e\x90\x1a\x02\x53\x26\x05\xb3\x75\xe2\xb6\xeb\xda\xef\x96\x6a\xde\xcd\x65\x9d\x4c\x8d\xb2\xc4\x0a\x94\x58\x51\x17\xb3\x8d\x96\x3d\xe3\xfe\xc6\x4c\x0f\x9d\xc7\xff\xa6\x6c\xbd\xdc\x11\x3c\xd1\x52\x6a\xfc\x67\x91\x18\x75\x1a\x85\x6a\xfc\x9f\x10\xf5\x0c\xd6\x8c\x94\x0e\x98\x7a\xb9\x14\x1f\x7f\xb2\x3c\x79\xb6\x15\x68\x31\x5e\x74\xa8\xbc\xaa\x41\x2d\xc5\xd0\x75\x9c\xd5\x46\xb2\xd2\x6f\xfb\xcd\x98\xb3\xa5\xc3\x6e\x5e\xbb\x93\xa5\x4e\x29\x3a\x93\x84\x6e\x68\xb6\xcb\x6d\xb9\xfd\x83\x93\x33\x3b\x29\x13\xff\x9f\xc6\x3c\xcc\x42\xd5\xcc\x12\x78\xfc\xae\x02\xc6\x21\xe1\x14\xb9\xd4\xf3\x5c\x9b\x7a\xf8\x6a\x07\xef\x47\xeb\xd7\x7c\xec\xd7\xa1\x67\x9c\x3c\x93\x6a\xee\x73\xe3\x95\x2e\xfa\x80\x0d\x1e\x68\xa1\x06\x19\x0b\xf1\xf8\xce\xd1\xe8\xef\xb4\x50\xbf\xe8\xd0\x12\xe1\xde\xae\x7b\x00\xf5\xa8\x5e\x4f\xe8\x51\x58\xff\xe1\xff\x57\x00\x00\x00\xff\xff\x78\x57\x54\xe8\x01\x10\x00\x00"

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 4097, mode: os.FileMode(420), modTime: time.Unix(1522140271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPurppuraJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5d\x6b\xe3\x46\x14\x7d\xcf\xaf\x38\x4c\x17\x2c\xd5\x89\xe4\x85\x3e\xad\x2d\x43\xda\x50\x68\xa1\x5b\x68\xfa\x16\x9b\x32\xd1\x5c\x5b\x53\x2b\x1a\x31\x73\x15\xd7\x6c\xfc\xdf\xcb\x8c\x6c\x47\x8e\xe2\xb0\xd9\xd2\x76\x1f\xa2\x97\x38\xf7\xfb\xe3\x9c\x19\x69\xd1\x54\x39\x6b\x53\xa1\xa9\x95\x64\xfa\x43\x96\x64\xd9\x45\xf1\xd9\xa7\x33\x00\x78\x97\x2c\x89\x7f\xbe\xfe\xf5\x63\x04\x91\xd2\x3d\x55\xec\x04\xce\xb1\xf7\x8a\xa0\x24\x4b\xc4\x68\xad\xfd\x73\x2f\x2d\x0a\x64\xf8\xb4\x1d\x1f\x64\xc5\xcd\xc0\x4a\xed\x48\x0d\xe6\xc8\x30\xea\xca\x6b\xaa\x94\xae\x96\x7d\x85\xcc\x57\x95\x59\x97\xa4\x96\x07\xb7\x83\x3a\x4d\xf1\x43\x49\xd2\xc2\x34\x16\x2c\x6f\x4b\x82\x59\xa0\x96\x8e\xd1\xd6\x88\x0b\xdc\x6e\x60\xe9\xce\xdc\xeb\x6a\x09\x59\x96\xb0\x66\xed\x60\x16\xdd\x18\x5c\x50\xeb\x7d\x0e\xfa\x2b\xa7\x9a\xb1\x30\x36\x48\x17\xda\x3a\x46\xb4\x2e\x74\x5e\x40\xbb\x20\x2b\x48\x2a\xb2\x17\xd6\xac\xe3\xe4\x10\xc5\x3b\x44\xbe\xe5\x15\x6d\xa0\x2b\x14\xdd\x51\x84\x01\x46\xe2\x1b\x81\x61\xd0\x0f\x21\x76\xf3\x15\x71\xb2\xd0\x95\x8a\x04\xdb\x0f\x4b\x8e\x46\xb1\x88\x93\x50\x2d\x45\xf1\xe3\xd8\xb6\x8f\x1d\xbf\x4b\x48\xe6\x45\x3b\xee\xee\xf8\x57\xb4\x39\xc7\xbd\x2c\xc3\x0a\x8e\x12\xa7\x29\xbe\x6f\xee\xea\x50\x7a\x6e\x9a\x8a\xfd\x88\xb8\xf0\xcd\x6c\xea\x30\xaf\xb6\x94\xf3\x43\xd3\xac\xb9\xa4\xe4\x28\x88\xef\xcc\xb1\xe4\xc6\x21\xf3\x69\x6e\x06\xd7\xe1\xbf\xc1\x7c\x7c\x64\x57\xdc\xb4\x56\x7e\x4f\x87\xdf\xc3\xf7\xbd\x8a\x7e\xf7\xf9\xb5\x43\x61\xac\xd5\x0a\x17\x58\x13\xd6\xb2\x62\xb0\x81\x2b\xcc\x1a\xa4\xb9\x20\x0b\xb1\xd6\x7e\x65\x1e\x33\x90\x2c\xce\x9f\xc6\x11\xa5\xdf\x75\x65\x58\x2f\x34\xa9\x60\x02\x63\xbd\xa0\xf0\xfb\x56\xb4\x83\x15\x4c\xd5\xb6\xb6\xa9\x9f\x74\xa6\x17\x88\x0e\xad\x65\x10\x2d\x3e\x45\x7f\x8e\xfb\x31\x28\x64\xf8\x45\x72\x91\x58\xd3\x54\x2a\x6a\xa7\xf1\x71\x57\xc1\x25\x0f\xe6\xf8\x16\xef\x47\xa3\x51\xdc\xf3\xf6\x9e\xb5\xb4\x8e\x7e\x2c\x8d\xe4\x48\xc5\xe3\x67\x4d\x2a\x5a\xe3\x4a\x32\x45\x50\x40\x3c\xee\x57\x91\xa6\xd0\x0a\x0f\x70\xa6\xb1\x39\xf9\x1f\xcd\xed\x9f\x94\x33\x1e\x70\x3c\x8e\x07\xc8\x00\x8f\x67\xfb\x60\x64\x10\x13\xb6\xd3\x09\xab\xa9\x47\x66\x68\xe4\xa7\xab\xc1\xdc\xe3\x73\x92\x7a\x69\xbf\x40\xc6\x30\xb8\x75\x5c\xae\x43\x19\x9f\xe9\x86\xbc\x94\xce\x65\x33\x91\x97\x3a\x5f\xcd\xc4\x54\xe0\x10\xa7\xed\xe2\x35\xf9\x15\x3e\xcf\x76\x22\x51\x58\x5a\x64\x33\x91\x76\x8e\x93\xd4\x87\x88\x0e\x6d\xc7\x3e\xd6\x4c\x4c\x65\xbe\x9a\xa4\x72\x2a\x4e\xc4\x43\x27\x58\xee\x0f\x9f\x13\x61\x82\xee\xa5\x40\x6d\xd9\xcf\xae\xf7\x52\xa9\x00\xd7\xc0\xcc\x9e\xc1\xfe\x28\x39\xe2\xe1\x33\x87\xca\x80\x6f\x8d\xda\x0c\xe2\x44\xd6\x9e\x06\x11\xc7\x2f\x26\x53\xc4\x52\x97\x2e\xf9\xc7\xf9\x7a\x01\xfc\xb3\x2f\xc2\x43\x0e\x8e\x37\x25\x65\x33\xa1\xb4\xab\x4b\xb9\xf9\x50\x99\x8a\xc6\x33\x11\xa0\x18\xc6\x12\x90\x62\x4a\x57\xcb\x2a\x9b\x89\xef\xbc\xaa\x7e\x44\xdc\x55\xa8\x74\x0f\x94\x7a\xe7\x92\xb2\x9d\x8a\xe3\xe4\xdb\x17\xa9\xde\xbd\x59\x4e\x10\xfe\x05\xaa\xb5\xd4\x72\x5f\x37\xb7\xbe\x8c\x5a\x1d\x84\x87\xe3\xf0\x04\xc2\x83\xce\x23\xfc\xd5\x94\x78\x83\xfe\xbf\x02\xfd\x57\x60\x7f\x77\x2f\xbe\xf6\x9e\xfb\xcd\xaf\xfc\xed\x92\xfb\xaf\x88\xf8\x85\x77\xdc\x1b\x07\x7b\xcf\xff\x74\xfd\xf4\x5e\x7c\xaf\x89\x4f\xbd\x63\x2b\x93\x37\x77\x54\x71\x12\x74\x1e\xb8\x97\xa1\x3f\xdc\xf8\xcc\xdd\x4f\xa7\x21\x44\xba\x93\x3d\xf9\x3a\xea\x68\x1e\x3f\xa8\x86\x10\x73\xd1\xa1\xd8\x76\xc7\x49\xff\x77\x7b\xf6\x77\x00\x00\x00\xff\xff\x5b\x55\x3c\x14\xf9\x0d\x00\x00"

func dataPurppuraJsBytes() ([]byte, error) {
	return bindataRead(
		_dataPurppuraJs,
		"data/purppura.js",
	)
}

func dataPurppuraJs() (*asset, error) {
	bytes, err := dataPurppuraJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/purppura.js", size: 3577, mode: os.FileMode(420), modTime: time.Unix(1522237744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html":  dataIndexHtml,
	"data/login.html":  dataLoginHtml,
	"data/purppura.js": dataPurppuraJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html":  &bintree{dataIndexHtml, map[string]*bintree{}},
		"login.html":  &bintree{dataLoginHtml, map[string]*bintree{}},
		"purppura.js": &bintree{dataPurppuraJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
